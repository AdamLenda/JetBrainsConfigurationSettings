<templateSet group="JVZoo Shared Templates">
  <template name="selectDtoBy1Parameter" value="    /**&#10;     * @param $FILTER_PARAMETER_1_TYPE$ $$$FILTER_PARAMETER_1_DOC$&#10;     * @param $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$&#10;     *&#10;     * @return string GetResponseCode constant&#10;     * @throws DBALException&#10;     * @throws DatabaseTableDefinitionException&#10;     */&#10;    public function select$BUSINESS_OBJECT_NAME$DtoBy$FUNCTION_NAME_QUALIFIER$($$$FILTER_PARAMETER_1$, $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$)&#10;    {&#10;        $sql = &quot;&#10;SELECT&#10;    &quot;.$DTO_TABLE_TYPE$::getSelectForAllColumns('$TABLE_ALIAS$', '$COLUMN_PREFIX$').&quot;&#10;FROM&#10;    &quot;.$DTO_TABLE_TYPE$::getTableName().&quot; $TABLE_ALIAS$&#10;WHERE&#10;    $TABLE_ALIAS$.$FILTER_COLUMN_1$ = :$FILTER_PARAMETER_1$&#10;&quot;;&#10;        $query = $this-&gt;$DATABASE_CONNECTION_SOURCE$-&gt;prepare($sql);&#10;        $query-&gt;bindValue('$FILTER_PARAMETER_1$', $$$FILTER_PARAMETER_1$, Type::INTEGER);&#10;&#10;        if (!$query-&gt;execute()) {&#10;            return GetResponseCode::ERROR;&#10;        }&#10;&#10;        if ($query-&gt;rowCount() &lt; 1) {&#10;            return GetResponseCode::NOT_FOUND;&#10;        }&#10;&#10;        $row = $query-&gt;fetch();&#10;        $$$DTO_VARIABLE_NAME$-&gt;mapFromObject($row, '$COLUMN_PREFIX$');&#10;&#10;        return GetResponseCode::FOUND;&#10;    }" description="Builds a JVZoo selectXyzDto method that takes one query filter" toReformat="true" toShortenFQNames="true">
    <variable name="BUSINESS_OBJECT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNCTION_NAME_QUALIFIER" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FILTER_PARAMETER_1" expression="decapitalize(FUNCTION_NAME_QUALIFIER)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILTER_PARAMETER_1_TYPE" expression="enum('string', 'integer','float','boolean')" defaultValue="" alwaysStopAt="true" />
    <variable name="FILTER_PARAMETER_1_DOC" expression="FILTER_PARAMETER_1" defaultValue="" alwaysStopAt="false" />
    <variable name="DTO_TYPE_NAME" expression="concat(BUSINESS_OBJECT_NAME, &quot;Dto&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DTO_TABLE_TYPE" expression="concat(BUSINESS_OBJECT_NAME, &quot;Table&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_VARIABLE_NAME" expression="decapitalize(DTO_TYPE_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="TABLE_ALIAS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="COLUMN_PREFIX" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DATABASE_CONNECTION_SOURCE" expression="enum(&quot;database&quot;, &quot;getDefaultDatabaseConnection()&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILTER_COLUMN_1" expression="snakeCase(FILTER_PARAMETER_1)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="selectDtoBy2Parameters" value="    /**&#10;     * @param integer $productId&#10;     * @param $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$&#10;     *&#10;     * @return string GetResponseCode constant&#10;     * @throws DBALException&#10;     * @throws DatabaseTableDefinitionException&#10;     */&#10;    public function select$BUSINESS_OBJECT_NAME$DtoBy$PARAMETER_1_NAME$And$PARAMETER_2_NAME$(&#10;        $$$PARAMETER_1$,&#10;        $$$PARAMETER_2$,&#10;        $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$)&#10;    {&#10;        $sql = &quot;&#10;SELECT&#10;    &quot;.$DTO_TABLE_TYPE$::getSelectForAllColumns('$TABLE_ALIAS$', '$COLUMN_PREFIX$').&quot;&#10;FROM&#10;    &quot;.$DTO_TABLE_TYPE$::getTableName().&quot; $TABLE_ALIAS$&#10;WHERE&#10;    $TABLE_ALIAS$.$FILTER_COLUMN_1$ = :$PARAMETER_1$&#10;AND $TABLE_ALIAS$.$FILTER_COLUMN_2$ = :$PARAMETER_2$&#10;&quot;;&#10;        $query = $this-&gt;database-&gt;prepare($sql);&#10;        $query-&gt;bindValue('$PARAMETER_1$', $$$PARAMETER_1$, Type::INTEGER);&#10;        $query-&gt;bindValue('$PARAMETER_2$', $$$PARAMETER_2$, Type::INTEGER);&#10;&#10;        if (!$query-&gt;execute()) {&#10;            return GetResponseCode::ERROR;&#10;        }&#10;&#10;        if ($query-&gt;rowCount() &lt; 1) {&#10;            return GetResponseCode::NOT_FOUND;&#10;        }&#10;&#10;        $row = $query-&gt;fetch();&#10;        $$$DTO_VARIABLE_NAME$-&gt;mapFromObject($row, '$COLUMN_PREFIX$');&#10;&#10;        return GetResponseCode::FOUND;&#10;    }" description="Builds a JVZoo selectXyzDto method that takes two query filters" toReformat="true" toShortenFQNames="true">
    <variable name="BUSINESS_OBJECT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_1_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_1" expression="decapitalize(PARAMETER_1_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="PARAMETER_2_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_2" expression="decapitalize(PARAMETER_2_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="DTO_TYPE_NAME" expression="concat(BUSINESS_OBJECT_NAME, &quot;Dto&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DTO_TABLE_TYPE" expression="concat(BUSINESS_OBJECT_NAME, &quot;Table&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_VARIABLE_NAME" expression="decapitalize(DTO_TYPE_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="TABLE_ALIAS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="COLUMN_PREFIX" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FILTER_COLUMN_1" expression="snakeCase(PARAMETER_1)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILTER_COLUMN_2" expression="snakeCase(PARAMETER_2)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="storeDto" value="    /**&#10;     * @param $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$&#10;     *&#10;     * @return string StoreResponseCode constant&#10;     */&#10;    public function store$BUSINESS_OBJECT_NAME$Dto($DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$)&#10;    {&#10;        $method = &quot;$DATA_ACCESS_CLASS_NAME$-&gt;insertOrUpdate$BUSINESS_OBJECT_NAME$Dto&quot;;&#10;&#10;        try {&#10;            $responseCode = $this-&gt;$DATA_ACCESS_MEMBER_NAME$-&gt;insertOrUpdate$BUSINESS_OBJECT_NAME$Dto(&#10;                $$$DTO_VARIABLE_NAME$&#10;            );&#10;        } catch (\Exception $exception) {&#10;            $this-&gt;getLogService()-&gt;error(&#10;                &quot;\&quot;{$method}\&quot; encountered an exception. Exception Message: &quot;.$exception-&gt;getMessage(),&#10;                [LogContextField::EXCEPTION =&gt; ExceptionTools::formatExceptionForLog($exception)]&#10;            );&#10;            return StoreResponseCode::ERROR;&#10;        }&#10;&#10;        $logMessage = &quot;\&quot;{$method}\&quot; returned \&quot;{$responseCode}\&quot;&quot;;&#10;&#10;        if (StoreResponseCode::isErrorOrInvalidValue($responseCode)) {&#10;            $this-&gt;getLogService()-&gt;error($logMessage);&#10;            return StoreResponseCode::ERROR;&#10;        }&#10;&#10;        $this-&gt;getLogService()-&gt;$SUCCESS_LOG_LEVEL$($logMessage);&#10;        return $responseCode;&#10;    }" description="Builds a JVZoo insertOrUpdateXyzDto method that takes one query filter" toReformat="true" toShortenFQNames="true">
    <variable name="BUSINESS_OBJECT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_TYPE_NAME" expression="concat(BUSINESS_OBJECT_NAME, &quot;Dto&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DTO_VARIABLE_NAME" expression="decapitalize(DTO_TYPE_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="DATA_ACCESS_CLASS_NAME" expression="concat(BUSINESS_OBJECT_NAME, &quot;DataAccess&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DATA_ACCESS_MEMBER_NAME" expression="decapitalize(DATA_ACCESS_CLASS_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="SUCCESS_LOG_LEVEL" expression="enum(&quot;debug&quot;, &quot;info&quot;, &quot;notice&quot;, &quot;warning&quot;, &quot;error&quot;, &quot;critical&quot;, &quot;alert&quot;, &quot;emergency&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="reg" value="//region $REGION_NAME$&#10;$END$&#10;//endregion $REGION_NAME$" description="region" toReformat="true" toShortenFQNames="true">
    <variable name="REGION_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="logex" value="$this-&gt;getLogService()-&gt;error(&#10;    &quot;$METHOD$ encountered an exception. Exception Message: &quot;.$exception-&gt;getMessage(),&#10;    [LogContextField::EXCEPTION =&gt; ExceptionTools::formatExceptionForLog($exception)]&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <variable name="METHOD" expression="" defaultValue="$method" alwaysStopAt="true" />
    <context>
      <option name="PHP Statement" value="true" />
    </context>
  </template>
  <template name="getDtoBy1Parameter" value="    /**&#10;     * @param $$$PARAMETER_1_VARIABLE_NAME$&#10;     * @param $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$&#10;     *&#10;     * @return string GetResponseCode constant&#10;     */&#10;    public function get$BUSINESS_OBJECT_NAME$DtoBy$PARAMETER_1_NAME$($$$PARAMETER_1_VARIABLE_NAME$, $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$)&#10;    {&#10;        if ($END$) {&#10;            $this-&gt;getLogService()-&gt;error(__METHOD__.&quot; failed: Invalid $PARAMETER_1_NAME$ parameter&quot;); &#10;            return GetResponseCode::ERROR;&#10;        }&#10;        &#10;        $method = &quot;$DATA_ACCESS_CLASS_NAME$-&gt;$DATA_ACCESS_METHOD_NAME$&quot;;&#10;&#10;        try {&#10;            $responseCode = $this-&gt;$DATA_ACCESS_MEMBER_NAME$-&gt;$DATA_ACCESS_METHOD_NAME$(&#10;                $$$PARAMETER_1_VARIABLE_NAME$,&#10;                $$$DTO_VARIABLE_NAME$&#10;            );&#10;        } catch (\Exception $exception) {&#10;            $this-&gt;getLogService()-&gt;error(&#10;                &quot;\&quot;{$method}\&quot; encountered an exception. Exception Message: &quot;.$exception-&gt;getMessage(),&#10;                [LogContextField::EXCEPTION =&gt; ExceptionTools::formatExceptionForLog($exception)]&#10;            );&#10;            return GetResponseCode::ERROR;&#10;        }&#10;&#10;        $logMessage = &quot;\&quot;{$method}\&quot; returned \&quot;{$responseCode}\&quot;&quot;;&#10;&#10;        if (GetResponseCode::isErrorOrInvalidValue($responseCode)) {&#10;            $this-&gt;getLogService()-&gt;error($logMessage);&#10;            return GetResponseCode::ERROR;&#10;        }&#10;&#10;        $this-&gt;getLogService()-&gt;info($logMessage);&#10;        return $responseCode;&#10;    }" description="Builds a JVZoo getXyzDtoBy method that takes one filter parameter" toReformat="true" toShortenFQNames="true">
    <variable name="BUSINESS_OBJECT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_1_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_TYPE_NAME" expression="concat(BUSINESS_OBJECT_NAME, &quot;Dto&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DTO_VARIABLE_NAME" expression="decapitalize(DTO_TYPE_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="PARAMETER_1_VARIABLE_NAME" expression="decapitalize(PARAMETER_1_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="DATA_ACCESS_CLASS_NAME" expression="concat(BUSINESS_OBJECT_NAME, &quot;DataAccess&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DATA_ACCESS_METHOD_NAME" expression="concat(&quot;select&quot;, BUSINESS_OBJECT_NAME, &quot;DtoBy&quot;, PARAMETER_1_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="DATA_ACCESS_MEMBER_NAME" expression="decapitalize(DATA_ACCESS_CLASS_NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="insertOrUpdateDtoWithAutoIdColumn" value="    /**&#10;     * @param $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$&#10;     * @return string StoreResponseCode constant&#10;     * @throws DBALException&#10;     */&#10;    public function insertOrUpdate$BUSINESS_OBJECT_NAME$Dto($DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$)&#10;    {&#10;        if (empty($$$DTO_VARIABLE_NAME$-&gt;getId())) {&#10;            return $this-&gt;insert$BUSINESS_OBJECT_NAME$Dto($$$DTO_VARIABLE_NAME$);&#10;        }&#10;&#10;        return $this-&gt;update$BUSINESS_OBJECT_NAME$Dto($$$DTO_VARIABLE_NAME$);&#10;    }&#10;&#10;    /**&#10;     * @param $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$&#10;     *&#10;     * @return string StoreResponseCode constant&#10;     * @throws DBALException&#10;     */&#10;    protected function insert$BUSINESS_OBJECT_NAME$Dto($DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$)&#10;    {&#10;        $$$DTO_VARIABLE_NAME$-&gt;setModified(DateTimeTools::currentServerTime());&#10;&#10;        $$$DTO_VARIABLE_NAME$-&gt;setCreated($$$DTO_VARIABLE_NAME$-&gt;getModified());&#10;&#10;        $query = $$$DTO_VARIABLE_NAME$-&gt;buildInsertQuery($this-&gt;$DATABASE_CONNECTION_SOURCE$);&#10;        if (!$query-&gt;execute()) {&#10;            return StoreResponseCode::ERROR;&#10;        }&#10;&#10;        if ($query-&gt;rowCount() &lt; 1) {&#10;            return StoreResponseCode::NO_CHANGE;&#10;        }&#10;&#10;        $$$DTO_VARIABLE_NAME$-&gt;setId($this-&gt;$DATABASE_CONNECTION_SOURCE$-&gt;lastInsertId());&#10;        return StoreResponseCode::SAVED;&#10;    }&#10;&#10;    /**&#10;     * @param $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$&#10;     *&#10;     * @return string StoreResponseCode constant&#10;     * @throws DBALException&#10;     */&#10;    protected function update$BUSINESS_OBJECT_NAME$Dto($DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$)&#10;    {&#10;        $$$DTO_VARIABLE_NAME$-&gt;setModified(DateTimeTools::currentServerTime());&#10;&#10;        $query = $$$DTO_VARIABLE_NAME$-&gt;buildUpdateQuery($this-&gt;$DATABASE_CONNECTION_SOURCE$);&#10;        if (!$query-&gt;execute()) {&#10;            return StoreResponseCode::ERROR;&#10;        }&#10;&#10;        if ($query-&gt;rowCount() &lt; 1) {&#10;            return StoreResponseCode::NO_CHANGE;&#10;        }&#10;&#10;        return StoreResponseCode::SAVED;&#10;    }" description="Builds a JVZoo insertOrUpdateXyzDto method where the table has an auto incrementing id column" toReformat="true" toShortenFQNames="true">
    <variable name="BUSINESS_OBJECT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_TYPE_NAME" expression="concat(BUSINESS_OBJECT_NAME, &quot;Dto&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DTO_VARIABLE_NAME" expression="decapitalize(DTO_TYPE_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="DATABASE_CONNECTION_SOURCE" expression="enum(&quot;database&quot;, &quot;getDefaultDatabaseConnection()&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="logparamerr" value="$this-&gt;getLogService()-&gt;error(__METHOD__.&quot; failed: $MESSAGE$.&quot;);" description="$this-&gt;logger-&gt;error(__METHOD__.&quot; failed: invalid XYZ parameter.&quot;);" toReformat="false" toShortenFQNames="true">
    <variable name="MESSAGE" expression="enum(concat(&quot;invalid &quot;, clipboard(), &quot; parameter&quot;), concat(clipboard(),&quot; is invalid&quot;))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Statement" value="true" />
    </context>
  </template>
  <template name="callGetDto" value="/*&#10; * Get $BUSINESS_OBJECT_NAME$$OBJECT_TYPE$&#10; */&#10;$OPTIONAL_VARIABLE_INITIALIZATION$&#10;$$responseCode = $$$SERVICE_REFERENCE$-&gt;get$BUSINESS_OBJECT_NAME$$OBJECT_TYPE$By$QUALIFIER$($QUALIFIER_PARAMETER$, $DTO_VARIABLE_NAME$);&#10;$logMessage = &quot;\$$$SERVICE_REFERENCE$-&gt;get$BUSINESS_OBJECT_NAME$$OBJECT_TYPE$By$QUALIFIER$ returned \&quot;{$responseCode}\&quot;&quot;;&#10;if ($CONDITION$) {&#10;    $$this-&gt;getLogService()-&gt;error($$logMessage$LOG_CONTEXT$);&#10;    return $ERROR_RESPONSE_CODE$;&#10;}&#10;$$this-&gt;getLogService()-&gt;$SUCCESS_LOG_LEVEL$($$logMessage$LOG_CONTEXT$);&#10;$END$" description="Calls `xyzService-&gt;getXyzDto` and evaluates the response" toReformat="true" toShortenFQNames="true">
    <variable name="BUSINESS_OBJECT_NAME" expression="capitalize(camelCase(clipboard()))" defaultValue="" alwaysStopAt="true" />
    <variable name="OBJECT_TYPE" expression="enum(&quot;Dto&quot;, &quot;Graph&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="OPTIONAL_VARIABLE_INITIALIZATION" expression="enum(concat(&quot;$&quot;, decapitalize(BUSINESS_OBJECT_NAME), capitalize(camelCase(OBJECT_TYPE)), &quot; = new &quot;, capitalize(camelCase(BUSINESS_OBJECT_NAME)), &quot;Dto();&quot;) , &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="SERVICE_REFERENCE" expression="enum(&quot;this&quot;, concat(&quot;this-&gt;&quot;, decapitalize(BUSINESS_OBJECT_NAME), &quot;Service&quot;), concat(&quot;this-&gt;get&quot;, capitalize(BUSINESS_OBJECT_NAME), &quot;Service()&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="QUALIFIER" expression="enum(concat(capitalize(camelCase(BUSINESS_OBJECT_NAME)), &quot;Id&quot;))" defaultValue="" alwaysStopAt="true" />
    <variable name="QUALIFIER_PARAMETER" expression="enum(concat(&quot;$&quot;, decapitalize(camelCase(QUALIFIER))))" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_VARIABLE_NAME" expression="concat(&quot;$&quot;, decapitalize(BUSINESS_OBJECT_NAME), capitalize(camelCase(OBJECT_TYPE)))" defaultValue="" alwaysStopAt="false" />
    <variable name="CONDITION" expression="enum(&quot;GetResponseCode::isErrorOrInvalidValue($responseCode)&quot;, &quot;$responseCode !== GetResponseCode::FOUND&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="LOG_CONTEXT" expression="enum(&quot;&quot;, &quot;, $logContext&quot;, &quot;, $this-&gt;buildLogContext([])&quot;, &quot;, $this-&gt;buildLogContext($logContext)&quot; )" defaultValue="" alwaysStopAt="true" />
    <variable name="ERROR_RESPONSE_CODE" expression="enum(&quot;GetResponseCode::ERROR&quot;, &quot;InitializeResponseCode::ERROR&quot;, &quot;StoreResponseCode::ERROR&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="SUCCESS_LOG_LEVEL" expression="enum(&quot;debug&quot;, &quot;info&quot;, &quot;notice&quot;, &quot;warning&quot;, &quot;error&quot;, &quot;critical&quot;, &quot;alert&quot;, &quot;emergency&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Statement" value="true" />
    </context>
  </template>
  <template name="rce" value="$$responseCode = $THIS$$SERVICE_NAME$-&gt;$METHOD_NAME$($END$);&#10;$$logMessage = &quot;$SERVICE_NAME$-&gt;$METHOD_NAME$ returned \&quot;{$responseCode}\&quot;&quot;;&#10;if ($RESPONSE_CODE_TYPE$::isErrorOrInvalidValue($responseCode)) {&#10;    $this-&gt;getLogService()-&gt;error($$logMessage$LOG_CONTEXT$);&#10;    return $RETURN_TYPE$::$RETURN_VALUE$;&#10;}" description="$responseCode =" toReformat="false" toShortenFQNames="true">
    <variable name="THIS" expression="enum(&quot;$this-&gt;&quot;,&quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="SERVICE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="METHOD_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="RESPONSE_CODE_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LOG_CONTEXT" expression="enum(&quot;, $this-&gt;buildLogContext($logContext)&quot;, &quot;, $logContext&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="RETURN_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="RETURN_VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Comment" value="true" />
      <option name="PHP Expression" value="true" />
      <option name="PHP Statement" value="true" />
      <option name="PHP String Literal" value="true" />
    </context>
  </template>
  <template name="log" value="$$this-&gt;$LOGGER_SOURCE$-&gt;$LOG_LEVEL$($LOG_MESSAGE$$LOG_CONTEXT$);" description="write a log message" toReformat="false" toShortenFQNames="true">
    <variable name="LOGGER_SOURCE" expression="enum(&quot;getLogService()&quot;, &quot;logger&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="LOG_LEVEL" expression="enum(&quot;debug&quot;, &quot;info&quot;, &quot;notice&quot;, &quot;warning&quot;, &quot;error&quot;, &quot;critical&quot;, &quot;alert&quot;, &quot;emergency&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="LOG_MESSAGE" expression="" defaultValue="&quot;$logMessage&quot;" alwaysStopAt="true" />
    <variable name="LOG_CONTEXT" expression="enum(&quot;, $logContext&quot;, &quot;, $this-&gt;buildLogContext([])&quot;, &quot;, $this-&gt;buildLogContext($logContext)&quot;, &quot; )" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="callInitDto" value="/*&#10; * Initialize $BUSINESS_OBJECT_NAME$$OBJECT_TYPE$&#10; */&#10;$OPTIONAL_VARIABLE_INITIALIZATION$&#10;$$responseCode = $$$SERVICE_REFERENCE$-&gt;initialize$BUSINESS_OBJECT_NAME$$OBJECT_TYPE$(&#10;    $END$,&#10;    $DTO_VARIABLE_NAME$&#10;);&#10;$logMessage = &quot;\$$$SERVICE_REFERENCE$-&gt;initialize$BUSINESS_OBJECT_NAME$$OBJECT_TYPE$ returned \&quot;{$responseCode}\&quot;&quot;;&#10;if ($CONDITION$) {&#10;    $$this-&gt;getLogService()-&gt;error($$logMessage$LOG_CONTEXT$);&#10;    return $ERROR_RESPONSE_CODE$;&#10;}&#10;$$this-&gt;getLogService()-&gt;$SUCCESS_LOG_LEVEL$($$logMessage$LOG_CONTEXT$);" description="" toReformat="true" toShortenFQNames="true">
    <variable name="BUSINESS_OBJECT_NAME" expression="enum(&quot;&quot;, capitalize(camelCase(clipboard())))" defaultValue="" alwaysStopAt="true" />
    <variable name="OBJECT_TYPE" expression="enum(&quot;Dto&quot;, &quot;Graph&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="OPTIONAL_VARIABLE_INITIALIZATION" expression="enum(concat(&quot;$&quot;, decapitalize(BUSINESS_OBJECT_NAME), capitalize(camelCase(OBJECT_TYPE)), &quot; = new &quot;, capitalize(camelCase(BUSINESS_OBJECT_NAME)), &quot;Dto();&quot;) , &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="SERVICE_REFERENCE" expression="enum(&quot;this&quot;, concat(&quot;this-&gt;&quot;, decapitalize(BUSINESS_OBJECT_NAME), &quot;Service&quot;))" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_VARIABLE_NAME" expression="concat(&quot;$&quot;, decapitalize(BUSINESS_OBJECT_NAME), capitalize(camelCase(OBJECT_TYPE)))" defaultValue="" alwaysStopAt="false" />
    <variable name="CONDITION" expression="enum(&quot;InitializeResponseCode::isErrorOrInvalidValue($responseCode)&quot;, &quot;$responseCode !== InitializeResponseCode::SUCCESS&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="LOG_CONTEXT" expression="enum(&quot;, $this-&gt;buildLogContext([])&quot;, &quot;, $this-&gt;buildLogContext($logContext)&quot;, &quot;, $logContext&quot;, )" defaultValue="" alwaysStopAt="true" />
    <variable name="ERROR_RESPONSE_CODE" expression="enum(&quot;InitializeResponseCode::ERROR&quot;, &quot;GetResponseCode::ERROR&quot;, &quot;StoreResponseCode::ERROR&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="SUCCESS_LOG_LEVEL" expression="enum(&quot;debug&quot;, &quot;info&quot;, &quot;notice&quot;, &quot;warning&quot;, &quot;error&quot;, &quot;critical&quot;, &quot;alert&quot;, &quot;emergency&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Statement" value="true" />
    </context>
  </template>
  <template name="pcp" value="$PCP$$END$" description="Paypal Commerce Platform" toReformat="false" toShortenFQNames="true">
    <variable name="PCP" expression="enum(&quot;paypalCommercePlatform&quot;, &quot;PaypalCommercePlatform&quot;, &quot;Paypal Commerce Platform&quot;, &quot;PAYPAL_COMMERCE_PLATFORM&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="propcol" value="    // region $PROPERTY_NAME$ Property&#10;    /**&#10;     * @var \JVZoo\Collection\ObjectsByIdCollection|null An ObjectsByIdCollection of $OBJECT_TYPE_FOR_DOCBLOCK$ objects or null for no value.&#10;     * &#10;     * @internal This value is managed by the get$PROPERTY_NAME$Collection method. Direct access is discouraged.&#10;     */&#10;    private $$$FIELD_NAME$ = null;&#10;    &#10;    /**&#10;     * Accessor Method for getting or initializing the ObjectsByIdCollection of $OBJECT_TYPE_FOR_DOCBLOCK$ objects.&#10;     *&#10;     * @return \JVZoo\Collection\ObjectsByIdCollection An ObjectsByIdCollection of $OBJECT_TYPE_FOR_DOCBLOCK$ objects.&#10;     */&#10;     protected function $GET_COLLECTION_METHOD_NAME$() {&#10;        if (!empty($this-&gt;$FIELD_NAME$)) {&#10;            return $this-&gt;$FIELD_NAME$;&#10;        }&#10;     &#10;        $uniqueKeySelector = function ($OBJECT_TYPE_FOR_DOCBLOCK$ $dto) {&#10;            return $dto-&gt;$GET_UNIQUE_KEY_PROPERTY$;&#10;        };&#10;     &#10;        $assignParentIdReferenceDelegate = function ($OBJECT_TYPE_FOR_DOCBLOCK$ $dto) {&#10;            if (!empty($dto-&gt;$GET_PARENT_FK_PROPERTY_NAME$)&#10;                &amp;&amp; $this-&gt;$GET_PARENT_ID_PROPERTY_NAME$ != $dto-&gt;$GET_PARENT_FK_PROPERTY_NAME$&#10;            ) {&#10;                $dto-&gt;$SET_PARENT_FK_PROPERTY_NAME$($this-&gt;$GET_PARENT_ID_PROPERTY_NAME$);&#10;            }&#10;        };&#10;     &#10;        try {&#10;            return $this-&gt;$FIELD_NAME$ = new ObjectsByIdCollection(&#10;                $OBJECT_TYPE$::class,&#10;                $uniqueKeySelector,&#10;                $assignParentIdReferenceDelegate&#10;            );&#10;        } catch (\Exception $exception) {&#10;            \JVZoo\Tools\LogTools::error(&#10;                __METHOD__ . &quot; encountered an exception. Exception Message: &quot; . $exception-&gt;getMessage(),&#10;                [\JVZoo\Service\Logging\LogContextField::EXCEPTION =&gt; \JVZoo\Tools\ExceptionTools::formatExceptionForLog($exception)]&#10;            );&#10;            return null;&#10;        }&#10;     }&#10;&#10;    /**&#10;     * Accessor method to get all $PROPERTY_NAME$ in the collection.&#10;     *&#10;     * @return [$OBJECT_TYPE_FOR_DOCBLOCK$]|null An array of $OBJECT_TYPE_FOR_DOCBLOCK$ objects.&#10;     */&#10;    public function get$PROPERTY_NAME$()&#10;    {&#10;        return $this&#10;            -&gt;$GET_COLLECTION_METHOD_NAME$()&#10;            -&gt;getAllObjects();&#10;    }&#10;&#10;    /**&#10;     * Fluent accessor method to get any $OBJECT_TYPE$ with the matching $$$LOWER_UNIQUE_KEY_PARAMTER_NAME_FOR_DOCBLOCK$&#10;     *&#10;     * @param mixed $$$LOWER_UNIQUE_KEY_PARAMTER_NAME_FOR_DOCBLOCK$&#10;     * @return $OBJECT_TYPE_FOR_DOCBLOCK$|null&#10;     * @return static&#10;     */&#10;    public function get$OBJECT_TYPE$By$CAPITALIZED_UNIQUE_KEY_PARAMTER_NAME$($$$LOWER_UNIQUE_KEY_PARAMTER_NAME$)&#10;    {&#10;        if (empty($$$LOWER_UNIQUE_KEY_PARAMTER_NAME$)) {&#10;            return null;&#10;        }&#10;&#10;        return $this&#10;            -&gt;$GET_COLLECTION_METHOD_NAME$()&#10;            -&gt;getObjectByUniqueKey($$$LOWER_UNIQUE_KEY_PARAMTER_NAME$);&#10;    }    &#10;&#10;    /**&#10;     * Fluent accessor method to set all $PROPERTY_NAME$ collection.&#10;     *&#10;     * @param [$OBJECT_TYPE_FOR_DOCBLOCK$] $$$FIELD_NAME$ An array of 0 to n $OBJECT_TYPE_FOR_DOCBLOCK$ objects.&#10;     * @return static&#10;     */&#10;    public function set$PROPERTY_NAME$(array $$$FIELD_NAME$)&#10;    {&#10;        $this&#10;            -&gt;$GET_COLLECTION_METHOD_NAME$()&#10;            -&gt;setAllObjects($$$FIELD_NAME$);&#10;&#10;        return $this;&#10;    }&#10;&#10;    /**&#10;     * Fluent accessor method to add or update a single $OBJECT_TYPE_FOR_DOCBLOCK$ in the collection.&#10;     *&#10;     * @param $OBJECT_TYPE_FOR_DOCBLOCK$ $$$DTO_PARAMETER_NAME$&#10;     * @return static&#10;     */&#10;    public function set$OBJECT_TYPE_FOR_DOCBLOCK$($OBJECT_TYPE$ $$$DTO_PARAMETER_NAME$)&#10;    {&#10;        $this&#10;            -&gt;$GET_COLLECTION_METHOD_NAME$()&#10;            -&gt;setObject($$$DTO_PARAMETER_NAME$);&#10;&#10;        return $this;&#10;    }&#10;&#10;    /**&#10;     * Fluent accessor method to remove any $OBJECT_TYPE$ with the matching $$$LOWER_UNIQUE_KEY_PARAMTER_NAME_FOR_DOCBLOCK$&#10;     *&#10;     * @param mixed $$$LOWER_UNIQUE_KEY_PARAMTER_NAME_FOR_DOCBLOCK$&#10;     * @return static&#10;     */&#10;    public function unset$OBJECT_TYPE$By$CAPITALIZED_UNIQUE_KEY_PARAMTER_NAME$($$$LOWER_UNIQUE_KEY_PARAMTER_NAME$)&#10;    {&#10;        if (empty($$$LOWER_UNIQUE_KEY_PARAMTER_NAME$)) {&#10;            return $this;&#10;        }&#10;&#10;        $this&#10;            -&gt;$GET_COLLECTION_METHOD_NAME$()&#10;            -&gt;unsetObjectByUniqueKey($$$LOWER_UNIQUE_KEY_PARAMTER_NAME$);&#10;&#10;        return $this;&#10;    }&#10;&#10;    /**&#10;     * Fluent accessor method to remove any collection items that are the same object as the&#10;     * $$$DTO_PARAMETER_NAME$ parameter.&#10;     *&#10;     * @param $OBJECT_TYPE$ $$$DTO_PARAMETER_NAME$ Object to be removed by exact object reference comparison&#10;     * @return static&#10;     */&#10;    public function unset$OBJECT_TYPE$($OBJECT_TYPE$ $$$DTO_PARAMETER_NAME$)&#10;    {&#10;        $this&#10;            -&gt;$GET_COLLECTION_METHOD_NAME$()&#10;            -&gt;unsetObject($$$DTO_PARAMETER_NAME$);&#10;        return $this;&#10;    }&#10;    // endregion $PROPERTY_NAME$ Property" description="A Collection Property" toReformat="true" toShortenFQNames="true">
    <variable name="PROPERTY_NAME" expression="" defaultValue="&quot;PluralizedUpperCamelCasePropertyName&quot;" alwaysStopAt="true" />
    <variable name="OBJECT_TYPE" expression="enum(capitalize(regularExpression(PROPERTY_NAME, &quot;s$&quot;, &quot;&quot;)),capitalize(regularExpression(PROPERTY_NAME, &quot;ies$&quot;, &quot;y&quot;)))" defaultValue="" alwaysStopAt="true" />
    <variable name="OBJECT_TYPE_FOR_DOCBLOCK" expression="OBJECT_TYPE" defaultValue="" alwaysStopAt="false" />
    <variable name="FIELD_NAME" expression="decapitalize(PROPERTY_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="GET_UNIQUE_KEY_PROPERTY" expression="" defaultValue="&quot;getId()&quot;" alwaysStopAt="true" />
    <variable name="GET_COLLECTION_METHOD_NAME" expression="enum(concat(&quot;get&quot;, regularExpression(PROPERTY_NAME, &quot;s$&quot;, &quot;&quot;), &quot;Collection&quot;),concat(&quot;get&quot;, regularExpression(PROPERTY_NAME, &quot;ies$&quot;, &quot;y&quot;), &quot;Collection&quot;))" defaultValue="" alwaysStopAt="true" />
    <variable name="GET_PARENT_FK_PROPERTY_NAME" expression="concat(&quot;get&quot;, capitalize(regularExpression(camelCase(fileNameWithoutExtension()),&quot;(Dtos|Vos|Dto|Vo)$&quot;, &quot;&quot;)), &quot;Id()&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="GET_PARENT_ID_PROPERTY_NAME" expression="" defaultValue="&quot;getId()&quot;" alwaysStopAt="true" />
    <variable name="SET_PARENT_FK_PROPERTY_NAME" expression="concat(&quot;set&quot;, capitalize(regularExpression(camelCase(fileNameWithoutExtension()),&quot;(Dtos|Vos|Dto|Vo)$&quot;, &quot;&quot;)), &quot;Id&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_PARAMETER_NAME" expression="decapitalize(OBJECT_TYPE)" defaultValue="" alwaysStopAt="true" />
    <variable name="CAPITALIZED_UNIQUE_KEY_PARAMTER_NAME" expression="capitalize(regularExpression(GET_UNIQUE_KEY_PROPERTY, &quot;(get)([^\($]+)(.*)&quot;, &quot;$2&quot;))" defaultValue="" alwaysStopAt="true" />
    <variable name="LOWER_UNIQUE_KEY_PARAMTER_NAME" expression="decapitalize(capitalize(CAPITALIZED_UNIQUE_KEY_PARAMTER_NAME))" defaultValue="" alwaysStopAt="true" />
    <variable name="LOWER_UNIQUE_KEY_PARAMTER_NAME_FOR_DOCBLOCK" expression="LOWER_UNIQUE_KEY_PARAMTER_NAME" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="logmsg" value="$logMessage = &quot;$END$ returned \&quot;$responseCode\&quot;&quot;;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="PHP Statement" value="true" />
    </context>
  </template>
  <template name="propfk" value="//region $PROPERTY_NAME$ Property&#10;/**&#10; * @internal This value is managed by set$PROPERTY_NAME$ and get$PROPERTY_NAME$.&#10; * Direct access is discouraged.&#10; *&#10; * @var $TYPE_NAME$$DEFAULT_VALUE$ $VALID_VALUES$&#10; */&#10;private $$$VALUE_NAME$ = $INITIAL_VALUE$;&#10;&#10;/**&#10; * $GETTER_DESCRIPTION$&#10; *&#10; * @return $TYPE_NAME$$DEFAULT_VALUE$ $GETTER_RETURN_DESCRIPTION$&#10; */&#10;public function get$PROPERTY_NAME$()&#10;{&#10;    return $this-&gt;$VALUE_NAME$;&#10;}&#10;&#10;/**&#10; * $SETTER_DESCRIPTION$&#10; *&#10; * @param $TYPE_NAME$ $PARAMETER_NAME$ $SETTER_PARAMETER_DESCRIPTION$&#10; * @return static&#10; */&#10;public function set$PROPERTY_NAME$($PARAMETER_TYPE_HINT$ $PARAMETER_NAME$)&#10;{&#10;    $ASSIGNMENT_EXPRESSION$&#10;    if (!empty($PARAMTER_UNIQUE_KEY$) &amp;&amp; $PARAMTER_UNIQUE_KEY$ !== $GET_FK_PROPERTY_NAME$) {&#10;        $SET_FK_PROPERTY_NAME$;&#10;    }&#10;    return $this;&#10;}&#10;//endregion $PROPERTY_NAME$ Property$END$" description="A N-1 FK property for one DTO to reference another" toReformat="true" toShortenFQNames="true">
    <variable name="PROPERTY_NAME" expression="" defaultValue="ForeignKeyPropertyName" alwaysStopAt="true" />
    <variable name="VALUE_NAME" expression="decapitalize(PROPERTY_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="INITIAL_VALUE" expression="" defaultValue="&quot;null&quot;" alwaysStopAt="true" />
    <variable name="TYPE_NAME" expression="enum(PROPERTY_NAME,&quot;string&quot;,&quot;int&quot;,&quot;bool&quot;,&quot;float&quot;,&quot;mixed&quot;,clipboard())" defaultValue="&quot;string&quot;" alwaysStopAt="true" />
    <variable name="DEFAULT_VALUE" expression="concat(&quot;|&quot;, INITIAL_VALUE)" defaultValue="" alwaysStopAt="true" />
    <variable name="VALID_VALUES" expression="enum(concat(capitalize(TYPE_NAME), &quot; object&quot;)), concat(&quot;A &quot;, TYPE_NAME), concat(&quot;An &quot;, TYPE_NAME))" defaultValue="" alwaysStopAt="false" />
    <variable name="GETTER_DESCRIPTION" expression="concat(&quot;Accessor method to get the &quot;, PROPERTY_NAME,&quot; value.&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="GETTER_RETURN_DESCRIPTION" expression="enum(concat(VALID_VALUES, NO_VALUE), concat(&quot;The current value of &quot;, PROPERTY_NAME))" defaultValue="" alwaysStopAt="false" />
    <variable name="SETTER_DESCRIPTION" expression="concat(&quot;Fluent accessor method to set the &quot;, PROPERTY_NAME,&quot; value.&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="SETTER_PARAMETER_DESCRIPTION" expression="enum(concat(VALID_VALUES, NO_VALUE), concat(&quot;A value to be converted to &quot;, TYPE_NAME,&quot; type&quot;))" defaultValue="" alwaysStopAt="false" />
    <variable name="PARAMETER_NAME" expression="concat(&quot;$&quot;, VALUE_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="PARAMETER_TYPE_HINT" expression="TYPE_NAME" defaultValue="" alwaysStopAt="false" />
    <variable name="ASSIGNMENT_EXPRESSION" expression="concat(&quot;$this-&gt;&quot;,VALUE_NAME,&quot; = &quot;,PARAMETER_NAME,&quot;;&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMTER_UNIQUE_KEY" expression="concat(PARAMETER_NAME, &quot;-&gt;&quot;, &quot;getId()&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="GET_FK_PROPERTY_NAME" expression="enum(concat(&quot;$this-&gt;get&quot;, regularExpression(PROPERTY_NAME, &quot;Dto&quot;, &quot;Id()&quot;)),concat(&quot;$this-&gt;get&quot;, TYPE_NAME,&quot;Id()&quot;), concat(&quot;$this-&gt;&quot;, snakeCase(regularExpression(PROPERTY_NAME, &quot;Dto&quot;, &quot;Id&quot;))))" defaultValue="" alwaysStopAt="true" />
    <variable name="SET_FK_PROPERTY_NAME" expression="enum(concat(&quot;$this-&gt;set&quot;, regularExpression(PROPERTY_NAME, &quot;Dto&quot;, &quot;Id(&quot;),PARAMTER_UNIQUE_KEY,&quot;)&quot;),concat(&quot;$this-&gt;get&quot;, TYPE_NAME,&quot;Id()&quot;), concat(&quot;$this-&gt;&quot;, snakeCase(regularExpression(PROPERTY_NAME, &quot;Dto&quot;, &quot;Id&quot;))))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
      <option name="PHP Interface Member" value="true" />
      <option name="PHP Trait Member" value="true" />
    </context>
  </template>
  <template name="prop" value="//region $PROPERTY_NAME$ Property&#10;/**&#10; * @internal This value is managed by set$PROPERTY_NAME$ and get$PROPERTY_NAME$.&#10; * Direct access is discouraged.&#10; *&#10; * @var $TYPE_NAME$$DEFAULT_VALUE$ $VALID_VALUES$$NO_VALUE$ &#10; */&#10;private $$$VALUE_NAME$ = $INITIAL_VALUE$;&#10;&#10;/**&#10; * $GETTER_DESCRIPTION$&#10; *&#10; * @return $TYPE_NAME$$DEFAULT_VALUE$ $GETTER_RETURN_DESCRIPTION$&#10; */&#10;public function get$PROPERTY_NAME$()&#10;{&#10;    return $this-&gt;$VALUE_NAME$;&#10;}&#10;&#10;/**&#10; * $SETTER_DESCRIPTION$&#10; *&#10; * @param $TYPE_NAME$$DEFAULT_VALUE$ $PARAMETER_NAME$ $SETTER_PARAMETER_DESCRIPTION$&#10; * @return static&#10; */&#10;public function set$PROPERTY_NAME$($PARAMETER_TYPE_HINT$$PARAMETER_NAME$)&#10;{&#10;    $ASSIGNMENT_EXPRESSION$&#10;    return $this;&#10;}&#10;//endregion $PROPERTY_NAME$ Property$END$" description="A class property" toReformat="true" toShortenFQNames="true">
    <variable name="PROPERTY_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE_NAME" expression="decapitalize(PROPERTY_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="INITIAL_VALUE" expression="" defaultValue="&quot;null&quot;" alwaysStopAt="true" />
    <variable name="TYPE_NAME" expression="enum(PROPERTY_NAME,&quot;string&quot;,&quot;int&quot;,&quot;bool&quot;,&quot;float&quot;,&quot;mixed&quot;,clipboard())" defaultValue="&quot;string&quot;" alwaysStopAt="true" />
    <variable name="DEFAULT_VALUE" expression="concat(&quot;|&quot;, INITIAL_VALUE)" defaultValue="" alwaysStopAt="true" />
    <variable name="VALID_VALUES" expression="enum(concat(&quot;A &quot;, TYPE_NAME), concat(capitalize(TYPE_NAME), &quot; object&quot;)))" defaultValue="" alwaysStopAt="true" />
    <variable name="NO_VALUE" expression="enum(concat(&quot; or &quot;, INITIAL_VALUE ,&quot; for no value.&quot;), &quot;.&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="GETTER_DESCRIPTION" expression="concat(&quot;Accessor method to get the &quot;, PROPERTY_NAME,&quot; value.&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="GETTER_RETURN_DESCRIPTION" expression="enum(concat(VALID_VALUES, NO_VALUE), concat(&quot;The current value of &quot;, PROPERTY_NAME,NO_VALUE))" defaultValue="" alwaysStopAt="true" />
    <variable name="SETTER_DESCRIPTION" expression="concat(&quot;Fluent accessor method to set the &quot;, PROPERTY_NAME,&quot; value.&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="SETTER_PARAMETER_DESCRIPTION" expression="enum(concat(VALID_VALUES, NO_VALUE), concat(&quot;A value to be converted to &quot;, TYPE_NAME,&quot; type&quot;, NO_VALUE))" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_TYPE_HINT" expression="enum(&quot;&quot;, TYPE_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_NAME" expression="concat(&quot;$&quot;, VALUE_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="ASSIGNMENT_EXPRESSION" expression="concat(&quot;$this-&gt;&quot;,VALUE_NAME,&quot; = &quot;,PARAMETER_NAME,&quot;;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
      <option name="PHP Interface Member" value="true" />
      <option name="PHP Trait Member" value="true" />
    </context>
  </template>
  <template name="callStoreDto" value="/*&#10; * Store $BUSINESS_OBJECT_NAME$Dto&#10; */&#10;$$responseCode = $$$SERVICE_REFERENCE$-&gt;$STORE_METHOD_NAME$($DTO_VARIABLE_NAME$);&#10;$logMessage = &quot;\$$$SERVICE_REFERENCE$-&gt;$STORE_METHOD_NAME$ returned \&quot;{$responseCode}\&quot;&quot;;&#10;if ($CONDITION$) {&#10;    $$this-&gt;getLogService()-&gt;error($$logMessage$LOG_CONTEXT$);&#10;    return $ERROR_RESPONSE_CODE$;&#10;}&#10;$$this-&gt;getLogService()-&gt;$SUCCESS_LOG_LEVEL$($$logMessage$LOG_CONTEXT$);&#10;$END$" description="Calls `xyzService-&gt;getXyzDto` and evaluates the response" toReformat="true" toShortenFQNames="true">
    <variable name="BUSINESS_OBJECT_NAME" expression="capitalize(camelCase(clipboard()))" defaultValue="" alwaysStopAt="true" />
    <variable name="SERVICE_REFERENCE" expression="enum(&quot;this&quot;, concat(&quot;this-&gt;&quot;, decapitalize(BUSINESS_OBJECT_NAME), &quot;Service&quot;), concat(&quot;this-&gt;get&quot;, capitalize(BUSINESS_OBJECT_NAME), &quot;Service()&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="STORE_METHOD_NAME" expression="concat(&quot;store&quot;, BUSINESS_OBJECT_NAME, &quot;Dto&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_VARIABLE_NAME" expression="concat(&quot;$&quot;, decapitalize(BUSINESS_OBJECT_NAME), &quot;Dto&quot;))" defaultValue="" alwaysStopAt="false" />
    <variable name="CONDITION" expression="enum(&quot;StoreResponseCode::isErrorOrInvalidValue($responseCode)&quot;, &quot;$responseCode !== StoreResponseCode::SAVED&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="LOG_CONTEXT" expression="enum(&quot;, $logContext&quot;, &quot;, $this-&gt;buildLogContext([])&quot;, &quot;, $this-&gt;buildLogContext($logContext)&quot;, &quot; )" defaultValue="" alwaysStopAt="true" />
    <variable name="ERROR_RESPONSE_CODE" expression="enum(&quot;StoreResponseCode::ERROR&quot;, &quot;GetResponseCode::ERROR&quot;, &quot;InitializeResponseCode::ERROR&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="SUCCESS_LOG_LEVEL" expression="enum(&quot;debug&quot;, &quot;info&quot;, &quot;notice&quot;, &quot;warning&quot;, &quot;error&quot;, &quot;critical&quot;, &quot;alert&quot;, &quot;emergency&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Statement" value="true" />
    </context>
  </template>
  <template name="propService" value="//region $PROPERTY_NAME$ Property&#10;/**&#10; * @internal This value is managed by set$PROPERTY_NAME$ and get$PROPERTY_NAME$.&#10; * Direct access is discouraged.&#10; *&#10; * @var $TYPE_NAME$ $VALID_VALUES$ &#10; */&#10;private $$$VALUE_NAME$ = $INITIAL_VALUE$;&#10;&#10;/**&#10; * $GETTER_DESCRIPTION$&#10; *&#10; * @return $TYPE_NAME$ $GETTER_RETURN_DESCRIPTION$&#10; */&#10;public function get$PROPERTY_NAME$()&#10;{&#10;    if ($this-&gt;$VALUE_NAME$ !== null) {&#10;        return $this-&gt;$VALUE_NAME$; &#10;    }&#10;&#10;    return $this-&gt;$VALUE_NAME$ = \CI\CodeIgniterGlobals::getDependencyInjectionContainer()-&gt;get(&#10;        $SERVICE_ID$&#10;    );&#10;}&#10;&#10;/**&#10; * $SETTER_DESCRIPTION$&#10; *&#10; * @param $TYPE_NAME$ $PARAMETER_NAME$ $SETTER_PARAMETER_DESCRIPTION$&#10; * @return static&#10; */&#10;public function set$PROPERTY_NAME$($PARAMETER_TYPE_HINT$$PARAMETER_NAME$)&#10;{&#10;    $ASSIGNMENT_EXPRESSION$&#10;    return $this;&#10;}&#10;//endregion $PROPERTY_NAME$ Property$END$" description="A service property" toReformat="true" toShortenFQNames="true">
    <variable name="PROPERTY_NAME" expression="enum(&quot;&quot;, clipboard())" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE_NAME" expression="decapitalize(PROPERTY_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="INITIAL_VALUE" expression="" defaultValue="&quot;null&quot;" alwaysStopAt="true" />
    <variable name="TYPE_NAME" expression="enum(PROPERTY_NAME,&quot;string&quot;,&quot;int&quot;,&quot;bool&quot;,&quot;float&quot;,&quot;mixed&quot;,clipboard())" defaultValue="&quot;string&quot;" alwaysStopAt="true" />
    <variable name="VALID_VALUES" expression="enum(concat(&quot;A &quot;, TYPE_NAME), concat(capitalize(TYPE_NAME), &quot; object&quot;)), concat(&quot;An &quot;, TYPE_NAME), concat(capitalize(TYPE_NAME), &quot; object&quot;)))" defaultValue="" alwaysStopAt="true" />
    <variable name="GETTER_DESCRIPTION" expression="concat(&quot;Accessor method to get the &quot;, PROPERTY_NAME,&quot; value.&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="GETTER_RETURN_DESCRIPTION" expression="VALID_VALUE" defaultValue="" alwaysStopAt="false" />
    <variable name="SERVICE_ID" expression="concat(TYPE_NAME, &quot;::class&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="SETTER_DESCRIPTION" expression="concat(&quot;Fluent accessor method to set the &quot;, PROPERTY_NAME,&quot; value.&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="PARAMETER_TYPE_HINT" expression="enum(&quot;&quot;, TYPE_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="SETTER_PARAMETER_DESCRIPTION" expression="VALID_VALUES" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_NAME" expression="concat(&quot;$&quot;, VALUE_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="ASSIGNMENT_EXPRESSION" expression="concat(&quot;$this-&gt;&quot;,VALUE_NAME,&quot; = &quot;,PARAMETER_NAME,&quot;;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
      <option name="PHP Interface Member" value="true" />
      <option name="PHP Trait Member" value="true" />
    </context>
  </template>
  <template name="documentationPath" value="$GROOVY_SCRIPT$&#10;$END$" description="" toReformat="false" toShortenFQNames="true">
    <variable name="GROOVY_SCRIPT" expression="groovyScript(concat(groovyScript(&quot;_editor.getProject().getBaseDir().getPath()&quot;), &quot;/tools/JetBrains/IdeScripts/BuildDocumentationPath.groovy&quot;), filePath())" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="MARKDOWN" value="true" />
    </context>
  </template>
  <template name="jsDependencyAnnotation" value="#jsDependency(files={&quot;$JS_FILE_NAME$&quot;}, symbols={&quot;$JS_SYMBOL_NAME$&quot;})" description="" toReformat="false" toShortenFQNames="true">
    <variable name="JS_FILE_NAME" expression="" defaultValue="&quot;example: jvzoo.auto-responder.smartengage.js&quot;" alwaysStopAt="true" />
    <variable name="JS_SYMBOL_NAME" expression="" defaultValue="&quot;example: fetchSequencesByAccountIdAndAvatarKey&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP Comment" value="true" />
    </context>
  </template>
  <template name="phpDependencyAnnotation" value="@phpDependency(references={&quot;$PHP_SYMBOL_REFERENCE$&quot;})" description="" toReformat="true" toShortenFQNames="true">
    <variable name="PHP_SYMBOL_REFERENCE" expression="" defaultValue="&quot;example: \Smartengage::USER_SMARTENGAGE_ACCOUNT_ID_FIELD_NAME&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="PHP Comment" value="true" />
    </context>
  </template>
  <template name="propd" value="//region $PROPERTY_NAME$ Property&#10;/**&#10; * @internal This value is managed by add$PROPERTY_NAME$, setAll$PROPERTY_NAME$ and getAll$PROPERTY_NAME$.&#10; * Direct access is discouraged.&#10; *&#10; * @var array|null $VALUE_TYPE$ array &#10; */&#10;private $$$VALUE_NAME$ = $INITIAL_VALUE$;&#10;&#10;/**&#10; * Fluent accessor for adding a $VALUE_TYPE$ to the $PROPERTY_NAME$ dictionary.&#10; *&#10; * @param $KEY_TYPE$ $$key &#10; * @param $VALUE_TYPE$ $$$VALUE_PARAMETER_NAME$&#10; * @return static&#10; */&#10;public function add$PROPERTY_NAME$($$key, $VALUE_TYPE_HINT$ $$$VALUE_PARAMETER_NAME$)&#10;{&#10;    $$this-&gt;$VALUE_NAME$[$$key] = $$$VALUE_PARAMETER_NAME$;&#10;    return $$this;&#10;}&#10;&#10;/**&#10; * Fluent accessor for clearing all values from the $PROPERTY_NAME$ dictionary.&#10; *&#10; * @return static&#10; */&#10;public function clear$PROPERTY_NAME$()&#10;{&#10;    $$this-&gt;$VALUE_NAME$ = null;&#10;    return $$this;&#10;}&#10;&#10;/**&#10; * Accessor method to return all values from the $PROPERTY_NAME$ dictionary.&#10; *&#10; * @return array$DEFAULT_VALUE$&#10; */&#10;public function getAll$PROPERTY_NAME$()&#10;{&#10;    return $$this-&gt;$VALUE_NAME$;&#10;}&#10;&#10;/**&#10; * Accessor method for returning one value from the $PROPERTY_NAME$ dictionary.&#10; *&#10; * @param $KEY_TYPE$ $$key&#10; * @return $VALUE_TYPE$$DEFAULT_VALUE$&#10; */&#10;public function get$PROPERTY_NAME$By$INDEX_NAME$($$key)&#10;{&#10;    if (!array_key_exists($$key, $$this-&gt;$VALUE_NAME$)) {&#10;        return $INITIAL_VALUE$;&#10;    } &#10;    return $$this-&gt;$VALUE_NAME$[$$key];&#10;}&#10;//endregion $PROPERTY_NAME$ Property$END$" description="A dictionary property" toReformat="true" toShortenFQNames="true">
    <variable name="PROPERTY_NAME" expression="enum(&quot;&quot;, clipboard())" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="VALUE_NAME" expression="decapitalize(PROPERTY_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="VALUE_TYPE" expression="enum(&quot;object&quot;,&quot;string&quot;,&quot;int&quot;, PROPERTY_NAME)" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <variable name="INITIAL_VALUE" expression="" defaultValue="&quot;null&quot;" alwaysStopAt="true" />
    <variable name="DEFAULT_VALUE" expression="concat(&quot;|&quot;, INITIAL_VALUE)" defaultValue="" alwaysStopAt="false" />
    <variable name="KEY_TYPE" expression="enum(&quot;string&quot;, &quot;int&quot;)" defaultValue="&quot;int&quot;" alwaysStopAt="true" />
    <variable name="VALUE_TYPE_HINT" expression="enum(&quot;&quot;, VALUE_TYPE,PROPERTY_NAME,clipboard())" defaultValue="VALUE_TYPE" alwaysStopAt="true" />
    <variable name="VALUE_PARAMETER_NAME" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="false" />
    <variable name="INDEX_NAME" expression="enum(&quot;&quot;, &quot;Id&quot;, &quot;Key&quot;, clipboard())" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
      <option name="PHP Interface Member" value="true" />
      <option name="PHP Trait Member" value="true" />
    </context>
  </template>
</templateSet>