<templateSet group="JVZoo Shared Templates">
  <template name="prop" value="//region $PROPERTY_NAME$ Property&#10;/**&#10; * @internal This value is managed by set$PROPERTY_NAME$ and get$PROPERTY_NAME$.&#10; * Direct access is discouraged.&#10; *&#10; * @var $TYPE_NAME$$DEFAULT_VALUE$ $VALID_VALUES$$NO_VALUE$ &#10; */&#10;private $$$VALUE_NAME$ = $INITIAL_VALUE$;&#10;&#10;/**&#10; * $GETTER_DESCRIPTION$&#10; *&#10; * @return $PROPERTY_TYPE$ $GETTER_RETURN_DESCRIPTION$&#10; */&#10;public function get$PROPERTY_NAME$()&#10;{&#10;    return $this-&gt;$VALUE_NAME$;&#10;}&#10;&#10;/**&#10; * $SETTER_DESCRIPTION$&#10; *&#10; * @param $PROPERTY_TYPE$ $PARAMETER_NAME$ $SETTER_PARAMETER_DESCRIPTION$&#10; * @return $this&#10; */&#10;public function set$PROPERTY_NAME$($PARAMETER_TYPE_HINT$$PARAMETER_NAME$)&#10;{&#10;    $ASSIGNMENT_EXPRESSION$ &#10;    return $this;&#10;}&#10;//endregion $PROPERTY_NAME$ Property&#10;$END$" description="A class property" toReformat="true" toShortenFQNames="true">
    <variable name="PROPERTY_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE_NAME" expression="decapitalize(PROPERTY_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="INITIAL_VALUE" expression="" defaultValue="&quot;null&quot;" alwaysStopAt="true" />
    <variable name="TYPE_NAME" expression="classNameComplete()" defaultValue="&quot;string&quot;" alwaysStopAt="true" />
    <variable name="PROPERTY_TYPE" expression="concat(TYPE_NAME, DEFAULT_VALUE)" defaultValue="" alwaysStopAt="false" />
    <variable name="DEFAULT_VALUE" expression="concat(&quot;|&quot;, INITIAL_VALUE)" defaultValue="" alwaysStopAt="true" />
    <variable name="VALID_VALUES" expression="enum(concat(&quot;A &quot;, TYPE_NAME), concat(capitalize(TYPE_NAME), &quot; object&quot;)))" defaultValue="" alwaysStopAt="true" />
    <variable name="NO_VALUE" expression="enum(concat(&quot; or &quot;, INITIAL_VALUE ,&quot; for no value.&quot;), &quot;.&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="GETTER_DESCRIPTION" expression="concat(&quot;Accessor method to get the &quot;, PROPERTY_NAME,&quot; value.&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="GETTER_RETURN_DESCRIPTION" expression="enum(concat(VALID_VALUES, NO_VALUE), concat(&quot;The current value of &quot;, PROPERTY_NAME,NO_VALUE))" defaultValue="" alwaysStopAt="true" />
    <variable name="SETTER_DESCRIPTION" expression="concat(&quot;Fluent accessor method to set the &quot;, PROPERTY_NAME,&quot; value.&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="SETTER_PARAMETER_DESCRIPTION" expression="enum(concat(VALID_VALUES, NO_VALUE), concat(&quot;A value to be converted to &quot;, TYPE_NAME,&quot; type&quot;, NO_VALUE))" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_TYPE_HINT" expression="enum(expectedType(), concat(TYPE_NAME, &quot; &quot;))" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_NAME" expression="concat(&quot;$&quot;, VALUE_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="ASSIGNMENT_EXPRESSION" expression="concat(&quot;$this-&gt;&quot;,VALUE_NAME,&quot; = &quot;,PARAMETER_NAME,&quot;;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="selectDtoBy1Parameter" value="    /**&#10;     * @param integer $productId&#10;     * @param $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$&#10;     *&#10;     * @return string GetResponseCode constant&#10;     * @throws \Doctrine\DBAL\DBALException&#10;     * @throws \JVZoo\DataTransportObject\Generated\DatabaseTableDefinitionException&#10;     */&#10;    public function select$BUSINESS_OBJECT_NAME$DtoBy$FUNCTION_NAME_QUALIFIER$($$$FILTER_PARAMETER_1$, $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$)&#10;    {&#10;        $sql = &quot;&#10;SELECT&#10;    &quot;.$DTO_TABLE_TYPE$::getSelectForAllColumns('$TABLE_ALIAS$', '$COLUMN_PREFIX$').&quot;&#10;FROM&#10;    &quot;.$DTO_TABLE_TYPE$::getTableName().&quot; $TABLE_ALIAS$&#10;WHERE&#10;    $TABLE_ALIAS$.$FILTER_COLUMN_1$ = :$FILTER_PARAMETER_1$&#10;&quot;;&#10;        $query = $this-&gt;database-&gt;prepare($sql);&#10;        $query-&gt;bindValue('$FILTER_PARAMETER_1$', $$$FILTER_PARAMETER_1$, Type::INTEGER);&#10;&#10;        if (!$query-&gt;execute()) {&#10;            return GetResponseCode::ERROR;&#10;        }&#10;&#10;        if ($query-&gt;rowCount() &lt; 1) {&#10;            return GetResponseCode::NOT_FOUND;&#10;        }&#10;&#10;        $row = $query-&gt;fetch();&#10;        $$$DTO_VARIABLE_NAME$-&gt;mapFromObject($row, '$COLUMN_PREFIX$');&#10;&#10;        return GetResponseCode::FOUND;&#10;    }" description="Builds a JVZoo selectXyzDto method that takes one query filter" toReformat="true" toShortenFQNames="true">
    <variable name="BUSINESS_OBJECT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNCTION_NAME_QUALIFIER" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FILTER_PARAMETER_1" expression="decapitalize(FUNCTION_NAME_QUALIFIER)" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_TYPE_NAME" expression="concat(BUSINESS_OBJECT_NAME, &quot;Dto&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DTO_TABLE_TYPE" expression="concat(BUSINESS_OBJECT_NAME, &quot;Table&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_VARIABLE_NAME" expression="decapitalize(DTO_TYPE_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="TABLE_ALIAS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="COLUMN_PREFIX" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FILTER_COLUMN_1" expression="snakeCase(FILTER_PARAMETER_1)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="selectDtoBy2Parameters" value="    /**&#10;     * @param integer $productId&#10;     * @param $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$&#10;     *&#10;     * @return string GetResponseCode constant&#10;     * @throws \Doctrine\DBAL\DBALException&#10;     * @throws \JVZoo\DataTransportObject\Generated\DatabaseTableDefinitionException&#10;     */&#10;    public function select$BUSINESS_OBJECT_NAME$DtoBy$PARAMETER_1_NAME$And$PARAMETER_2_NAME$(&#10;        $$$PARAMETER_1$,&#10;        $$$PARAMETER_2$,&#10;        $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$)&#10;    {&#10;        $sql = &quot;&#10;SELECT&#10;    &quot;.$DTO_TABLE_TYPE$::getSelectForAllColumns('$TABLE_ALIAS$', '$COLUMN_PREFIX$').&quot;&#10;FROM&#10;    &quot;.$DTO_TABLE_TYPE$::getTableName().&quot; $TABLE_ALIAS$&#10;WHERE&#10;    $TABLE_ALIAS$.$FILTER_COLUMN_1$ = :$PARAMETER_1$&#10;AND $TABLE_ALIAS$.$FILTER_COLUMN_2$ = :$PARAMETER_2$&#10;&quot;;&#10;        $query = $this-&gt;database-&gt;prepare($sql);&#10;        $query-&gt;bindValue('$PARAMETER_1$', $$$PARAMETER_1$, Type::INTEGER);&#10;        $query-&gt;bindValue('$PARAMETER_2$', $$$PARAMETER_2$, Type::INTEGER);&#10;&#10;        if (!$query-&gt;execute()) {&#10;            return GetResponseCode::ERROR;&#10;        }&#10;&#10;        if ($query-&gt;rowCount() &lt; 1) {&#10;            return GetResponseCode::NOT_FOUND;&#10;        }&#10;&#10;        $row = $query-&gt;fetch();&#10;        $$$DTO_VARIABLE_NAME$-&gt;mapFromObject($row, '$COLUMN_PREFIX$');&#10;&#10;        return GetResponseCode::FOUND;&#10;    }" description="Builds a JVZoo selectXyzDto method that takes two query filters" toReformat="true" toShortenFQNames="true">
    <variable name="BUSINESS_OBJECT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_1_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_1" expression="decapitalize(PARAMETER_1_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="PARAMETER_2_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_2" expression="decapitalize(PARAMETER_2_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="DTO_TYPE_NAME" expression="concat(BUSINESS_OBJECT_NAME, &quot;Dto&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DTO_TABLE_TYPE" expression="concat(BUSINESS_OBJECT_NAME, &quot;Table&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_VARIABLE_NAME" expression="decapitalize(DTO_TYPE_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="TABLE_ALIAS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="COLUMN_PREFIX" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FILTER_COLUMN_1" expression="snakeCase(PARAMETER_1)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILTER_COLUMN_2" expression="snakeCase(PARAMETER_2)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="storeDto" value="    /**&#10;     * @param $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$&#10;     *&#10;     * @return string StoreResponseCode constant&#10;     */&#10;    public function store$BUSINESS_OBJECT_NAME$Dto($DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$)&#10;    {&#10;        $method = &quot;$DATA_ACCESS_CLASS_NAME$-&gt;insertOrUpdate$BUSINESS_OBJECT_NAME$Dto&quot;;&#10;&#10;        try {&#10;            $responseCode = $this-&gt;$DATA_ACCESS_MEMBER_NAME$-&gt;insertOrUpdate$BUSINESS_OBJECT_NAME$Dto(&#10;                $$$DTO_VARIABLE_NAME$&#10;            );&#10;        } catch (\Exception $exception) {&#10;            $this-&gt;logger-&gt;error(&#10;                &quot;\&quot;{$method}\&quot; encountered an exception. Exception Message: &quot;.$exception-&gt;getMessage(),&#10;                [LogContextField::EXCEPTION =&gt; ExceptionTools::formatExceptionForLog($exception)]&#10;            );&#10;            return StoreResponseCode::ERROR;&#10;        }&#10;&#10;        $logMessage = &quot;\&quot;{$method}\&quot; returned \&quot;{$responseCode}\&quot;&quot;;&#10;&#10;        if (StoreResponseCode::isErrorOrInvalidValue($responseCode)) {&#10;            $this-&gt;logger-&gt;error($logMessage);&#10;            return StoreResponseCode::ERROR;&#10;        }&#10;&#10;        $this-&gt;logger-&gt;info($logMessage);&#10;        return $responseCode;&#10;    }" description="Builds a JVZoo insertOrUpdateXyzDto method that takes one query filter" toReformat="true" toShortenFQNames="true">
    <variable name="BUSINESS_OBJECT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_TYPE_NAME" expression="concat(BUSINESS_OBJECT_NAME, &quot;Dto&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DTO_VARIABLE_NAME" expression="decapitalize(DTO_TYPE_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="DATA_ACCESS_CLASS_NAME" expression="concat(BUSINESS_OBJECT_NAME, &quot;DataAccess&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DATA_ACCESS_MEMBER_NAME" expression="decapitalize(DATA_ACCESS_CLASS_NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="reg" value="//region $REGION_NAME$&#10;&#10;$END$&#10;&#10;//endregion $REGION_NAME$" description="region" toReformat="true" toShortenFQNames="true">
    <variable name="REGION_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="logex" value="$this-&gt;logger-&gt;error(&#10;    &quot;$METHOD$ encountered an exception. Exception Message: &quot;.$exception-&gt;getMessage(),&#10;    [LogContextField::EXCEPTION =&gt; ExceptionTools::formatExceptionForLog($exception)]&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <variable name="METHOD" expression="" defaultValue="$method" alwaysStopAt="true" />
    <context>
      <option name="PHP Statement" value="true" />
    </context>
  </template>
  <template name="getDtoBy1Parameter" value="    /**&#10;     * @param $$$PARAMETER_1_VARIABLE_NAME$&#10;     * @param $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$&#10;     *&#10;     * @return string GetResponseCode constant&#10;     */&#10;    public function get$BUSINESS_OBJECT_NAME$DtoBy$PARAMETER_1_NAME$($$$PARAMETER_1_VARIABLE_NAME$, $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$)&#10;    {&#10;        if ($END$) {&#10;            $this-&gt;logger-&gt;error(__METHOD__.&quot; failed: Invalid $PARAMETER_1_NAME$ parameter&quot;); &#10;            return GetResponseCode::ERROR;&#10;        }&#10;        &#10;        $method = &quot;$DATA_ACCESS_CLASS_NAME$-&gt;$DATA_ACCESS_METHOD_NAME$&quot;;&#10;&#10;        try {&#10;            $responseCode = $this-&gt;$DATA_ACCESS_MEMBER_NAME$-&gt;$DATA_ACCESS_METHOD_NAME$(&#10;                $$$PARAMETER_1_VARIABLE_NAME$,&#10;                $$$DTO_VARIABLE_NAME$&#10;            );&#10;        } catch (\Exception $exception) {&#10;            $this-&gt;logger-&gt;error(&#10;                &quot;\&quot;{$method}\&quot; encountered an exception. Exception Message: &quot;.$exception-&gt;getMessage(),&#10;                [LogContextField::EXCEPTION =&gt; ExceptionTools::formatExceptionForLog($exception)]&#10;            );&#10;            return GetResponseCode::ERROR;&#10;        }&#10;&#10;        $logMessage = &quot;\&quot;{$method}\&quot; returned \&quot;{$responseCode}\&quot;&quot;;&#10;&#10;        if (GetResponseCode::isErrorOrInvalidValue($responseCode)) {&#10;            $this-&gt;logger-&gt;error($logMessage);&#10;            return GetResponseCode::ERROR;&#10;        }&#10;&#10;        $this-&gt;logger-&gt;info($logMessage);&#10;        return $responseCode;&#10;    }" description="Builds a JVZoo getXyzDtoBy method that takes one filter parameter" toReformat="true" toShortenFQNames="true">
    <variable name="BUSINESS_OBJECT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_1_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_TYPE_NAME" expression="concat(BUSINESS_OBJECT_NAME, &quot;Dto&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DTO_VARIABLE_NAME" expression="decapitalize(DTO_TYPE_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="PARAMETER_1_VARIABLE_NAME" expression="decapitalize(PARAMETER_1_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="DATA_ACCESS_CLASS_NAME" expression="concat(BUSINESS_OBJECT_NAME, &quot;DataAccess&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DATA_ACCESS_METHOD_NAME" expression="concat(&quot;select&quot;, BUSINESS_OBJECT_NAME, &quot;DtoBy&quot;, PARAMETER_1_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="DATA_ACCESS_MEMBER_NAME" expression="decapitalize(DATA_ACCESS_CLASS_NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="insertOrUpdateDtoWithAutoIdColumn" value="    /**&#10;     * @param $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$&#10;     * @return string StoreResponseCode constant&#10;     * @throws \Doctrine\DBAL\DBALException&#10;     */&#10;    public function insertOrUpdate$BUSINESS_OBJECT_NAME$Dto($DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$)&#10;    {&#10;        if (empty($$$DTO_VARIABLE_NAME$-&gt;getId())) {&#10;            return $this-&gt;insert$BUSINESS_OBJECT_NAME$Dto($$$DTO_VARIABLE_NAME$);&#10;        }&#10;&#10;        return $this-&gt;update$BUSINESS_OBJECT_NAME$Dto($$$DTO_VARIABLE_NAME$);&#10;    }&#10;&#10;    /**&#10;     * @param $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$&#10;     *&#10;     * @return string StoreResponseCode constant&#10;     * @throws \Doctrine\DBAL\DBALException&#10;     */&#10;    protected function insert$BUSINESS_OBJECT_NAME$Dto($DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$)&#10;    {&#10;        $$$DTO_VARIABLE_NAME$-&gt;setModified(DateTimeTools::currentServerTime());&#10;&#10;        $$$DTO_VARIABLE_NAME$-&gt;setCreated($$$DTO_VARIABLE_NAME$-&gt;getModified());&#10;&#10;        $query = $$$DTO_VARIABLE_NAME$-&gt;buildInsertQuery($this-&gt;database);&#10;        if (!$query-&gt;execute()) {&#10;            return StoreResponseCode::ERROR;&#10;        }&#10;&#10;        if ($query-&gt;rowCount() &lt; 1) {&#10;            return StoreResponseCode::NO_CHANGE;&#10;        }&#10;&#10;        $$$DTO_VARIABLE_NAME$-&gt;setId($this-&gt;database-&gt;lastInsertId());&#10;        return StoreResponseCode::SAVED;&#10;    }&#10;&#10;    /**&#10;     * @param $DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$&#10;     *&#10;     * @return string StoreResponseCode constant&#10;     * @throws \Doctrine\DBAL\DBALException&#10;     */&#10;    protected function update$BUSINESS_OBJECT_NAME$Dto($DTO_TYPE_NAME$ $$$DTO_VARIABLE_NAME$)&#10;    {&#10;        $$$DTO_VARIABLE_NAME$-&gt;setModified(DateTimeTools::currentServerTime());&#10;&#10;        $query = $$$DTO_VARIABLE_NAME$-&gt;buildUpdateQuery($this-&gt;database);&#10;        if (!$query-&gt;execute()) {&#10;            return StoreResponseCode::ERROR;&#10;        }&#10;&#10;        if ($query-&gt;rowCount() &lt; 1) {&#10;            return StoreResponseCode::NO_CHANGE;&#10;        }&#10;&#10;        $$$DTO_VARIABLE_NAME$-&gt;setId($this-&gt;database-&gt;lastInsertId());&#10;        return StoreResponseCode::SAVED;&#10;    }" description="Builds a JVZoo insertOrUpdateXyzDto method where the table has an auto incrementing id column" toReformat="true" toShortenFQNames="true">
    <variable name="BUSINESS_OBJECT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DTO_TYPE_NAME" expression="concat(BUSINESS_OBJECT_NAME, &quot;Dto&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DTO_VARIABLE_NAME" expression="decapitalize(DTO_TYPE_NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
</templateSet>