<templateSet group="PHP7">
  <template name="props" value="/**&#10; * @var array[$TYPE$]&#10; */&#10;protected $$$PROPERTY_NAME$Stack;&#10;&#10;/**&#10; * @param $TYPE$ $$$ACCESSOR_PARAMETER_NAME$&#10; * @return $this&#10; */&#10;public function push$ACCESSOR_NAME$($TYPE$ $$$ACCESSOR_PARAMETER_NAME$)&#10;{&#10;    $this-&gt;$PROPERTY_NAME$Stack[] = $$$ACCESSOR_PARAMETER_NAME$;&#10;    return $this;&#10;}&#10;&#10;/**&#10; * @return $TYPE$&#10; */&#10;public function pop$ACCESSOR_NAME$(): $TYPE$&#10;{&#10;    $$lastIndex = count(count($$this-&gt;$PROPERTY_NAME$)-1);&#10;    $$result = $$this-&gt;$PROPERTY_NAME$Stack[$$lastIndex];&#10;    unset($$this-&gt;$PROPERTY_NAME$Stack[$$lastIndex]);&#10;    return $$result;&#10;}&#10;&#10;/**&#10; * @return $TYPE$&#10; */&#10;public function top$ACCESSOR_NAME$(): $TYPE$&#10;{&#10;    return $$this-&gt;$PROPERTY_NAME$Stack[count($$this-&gt;$PROPERTY_NAME$)-1];&#10;}&#10;&#10;/**&#10; * @return array[$TYPE$]&#10; */&#10;public function all$ACCESSOR_NAME$(): array&#10;{&#10;    return array_reverse($$this-&gt;$PROPERTY_NAME$Stack);&#10;}&#10;$END$&#10;" description="create a class property that works like a stack" toReformat="true" toShortenFQNames="true">
    <variable name="ACCESSOR_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="string" alwaysStopAt="true" />
    <variable name="ACCESSOR_PARAMETER_NAME" expression="decapitalize(ACCESSOR_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="PROPERTY_NAME" expression="decapitalize(ACCESSOR_NAME)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="prop" value="/**&#10; * @var $TYPE$&#10; */&#10;protected $$$PROPERTY_NAME$;&#10;/**&#10; * @param $TYPE$$$$PROPERTY_NAME$&#10; * @return $$this&#10; */&#10;public function set$ACCESSOR_NAME$($TYPE$$$$PROPERTY_NAME$)&#10;{&#10;    $this-&gt;$PROPERTY_NAME$ = $$$PROPERTY_NAME$;&#10;    return $this;&#10;}&#10;/**&#10; * @return $TYPE$&#10; */&#10;public function get$ACCESSOR_NAME$()&#10;{&#10;    return $$this-&gt;$PROPERTY_NAME$;&#10;}&#10;&#10;$END$&#10;" description="Create Protected Property w/ Accessors" toReformat="true" toShortenFQNames="true">
    <variable name="PROPERTY_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ACCESSOR_NAME" expression="capitalize(PROPERTY_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="propa" value="/**&#10; * @var $TYPE$&#10; */&#10;protected $$$PROPERTY_NAME$;&#10;/**&#10; * @param $TYPE$&#10; * @return $$this&#10; */&#10;public function add$ACCESSOR_NAME$($TYPE$$$$PROPERTY_NAME$)&#10;{&#10;    $this-&gt;$PROPERTY_NAME$[] = $$$PROPERTY_NAME$;&#10;    return $this;&#10;}&#10;/**&#10; * @return $TYPE$&#10; */&#10;public function get$ACCESSOR_NAME$()&#10;{&#10;    return $$this-&gt;$PROPERTY_NAME$;&#10;}&#10;&#10;$END$&#10;" description="Create Protected Array Property w/ Accessors" toReformat="true" toShortenFQNames="true">
    <variable name="PROPERTY_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ACCESSOR_NAME" expression="capitalize(PROPERTY_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="array" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="propd" value="/**&#10; * @var array[$PARAMETER_TYPE$]&#10; */&#10;protected $$$PROPERTY_NAME$;&#10;/**&#10; * @param $KEY_TYPE$ $key &#10; * @param $PARAMETER_TYPE$ $$$ACCESSOR_PARAMETER_NAME$&#10; * @return $this&#10; */&#10;public function set$ACCESSOR_NAME$($KEY_TYPE$$$key, $TYPE$$$$ACCESSOR_PARAMETER_NAME$)&#10;{&#10;    $this-&gt;$PROPERTY_NAME$[$key] = $$$ACCESSOR_PARAMETER_NAME$;&#10;    return $this;&#10;}&#10;/**&#10; * @param $KEY_TYPE$ $key&#10; * @return $PARAMETER_TYPE$&#10; */&#10;public function get$ACCESSOR_NAME$($KEY_TYPE$$$key)&#10;{&#10;    return $$this-&gt;$PROPERTY_NAME$[$$key];&#10;}&#10;&#10;$END$&#10;" description="Create Protected Dictionary Property w/ Accessors" toReformat="true" toShortenFQNames="true">
    <variable name="PROPERTY_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ACCESSOR_NAME" expression="capitalize(PROPERTY_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="KEY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ACCESSOR_PARAMETER_NAME" expression="camelCase(ACCESSOR_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
</templateSet>