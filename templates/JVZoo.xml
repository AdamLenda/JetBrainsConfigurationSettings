<templateSet group="JVZoo">
  <template name="prcf" value="pr(__CLASS__.'-&gt;'.__FUNCTION__.'['.__LINE__.']');" description="print class line and function" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="propa" value="protected $$$VALUE_NAME$;&#10;&#10;/**&#10; * Returns teh array $VALUE_NAME$&#10; * @return array&#10; */&#10;public function get$PROPERTY_NAME$()&#10;{&#10;    return $this-&gt;$VALUE_NAME$;&#10;}&#10;&#10;/**&#10; * Overwrites the array $VALUE_NAME$&#10; * @param array &#10; * @return self&#10; */&#10;public function set$PROPERTY_NAME$($$$VALUE_NAME$)&#10;{&#10;    $this-&gt;$VALUE_NAME$ = $$$VALUE_NAME$;&#10;    return $this;&#10;}&#10;&#10;/**&#10; * Overwrites the value at the specified index, or appends to the array&#10; * @param any the value to add to the array&#10; * @param any the optional index to assign the value to &#10; * @return self&#10; */&#10;public function add$PROPERTY_NAME$($$value, $$index = null)&#10;{&#10;    if ($$index !== null) {&#10;        $this-&gt;$VALUE_NAME$[$$index] = $$value;&#10;    } else {&#10;        $this-&gt;$VALUE_NAME$[] = $$value;&#10;    }&#10;    return $this;&#10;}&#10;&#10;/**&#10; * Unsets the specified index, or uses array_search to find the value's index and then unsets it&#10; * @param any the value to add to the array&#10; * @param any the optional index to assign the value to &#10; * @return self&#10; */&#10;public function remove$PROPERTY_NAME$($$index = null, $$value = null)&#10;{&#10;    if ($$index !== null &amp;&amp; array_key_exists($$index, $this-&gt;$VALUE_NAME$)) {&#10;        unset($this-&gt;$VALUE_NAME$[$$index]);&#10;    }&#10;    else if ($$value !== null&#10;    &amp;&amp; (!empty($$index = array_search($$value, $this-&gt;$VALUE_NAME$)) || $$index === 0)) {&#10;        unset($this-&gt;$VALUE_NAME$[$$index]);&#10;    } &#10;    return $this;&#10;}" description="array property, for single values ues prop" toReformat="true" toShortenFQNames="true">
    <variable name="PROPERTY_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE_NAME" expression="decapitalize(PROPERTY_NAME)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="propro" value="/**&#10; * @var $TYPE_NAME$&#10; */&#10;private $$$VALUE_NAME$;&#10;&#10;/**&#10; * @return $TYPE_NAME$&#10; */&#10;public function get$PROPERTY_NAME$()&#10;{&#10;    return $this-&gt;$VALUE_NAME$;&#10;}&#10;&#10;/**&#10; * @param $TYPE_NAME$&#10; * @return $this&#10; */&#10;protected function set$PROPERTY_NAME$($PARAMETER_TYPE_NAME$ $$$VALUE_NAME$)&#10;{&#10;    $this-&gt;$VALUE_NAME$ = $$$VALUE_NAME$;&#10;    return $this;&#10;}" description="readonly property" toReformat="true" toShortenFQNames="true">
    <variable name="PROPERTY_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE_NAME" expression="decapitalize(PROPERTY_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE_NAME" expression="TYPE_NAME" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_TYPE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="prop" value="/**&#10; * @var $TYPE_NAME$&#10; */&#10;private $$$VALUE_NAME$;&#10;&#10;/**&#10; * @return $TYPE_NAME$&#10; */&#10;public function get$PROPERTY_NAME$()&#10;{&#10;    return $this-&gt;$VALUE_NAME$;&#10;}&#10;&#10;/**&#10; * @param $TYPE_NAME$&#10; * @return $this&#10; */&#10;public function set$PROPERTY_NAME$($PARAMETER_TYPE_NAME$ $$$VALUE_NAME$)&#10;{&#10;    $this-&gt;$VALUE_NAME$ = $$$VALUE_NAME$;&#10;    return $this;&#10;}" description="readonly property" toReformat="true" toShortenFQNames="true">
    <variable name="PROPERTY_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE_NAME" expression="decapitalize(PROPERTY_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE_NAME" expression="TYPE_NAME" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETER_TYPE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
</templateSet>